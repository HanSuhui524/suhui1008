'use strict';
const _ = new WeakMap()
const ekit=require('ekit')

const grades = ekit.grades;
const subjects = new ekit.subjects();
const core = require('kpi.core')
const KPISearch=require('../lib/search')
const search = new KPISearch()




class KPIEntity extends Map{
    constructor( name , title ){
        super([
            [ 'entity-name', name ],
            [ 'entity-title', title ],
            [ 'kindle-sparks' , undefined ],
            [ 'common-core' , undefined ]
        ])
    }
    get ks(){ return this.get('kindle-sparks'); }
    set ks(value){ return this.set('kindle-sparks',value); }
    get cc(){ return this.get('common-core'); }
    set cc(value){ return this.set('common-core',value); }
    get e(){ return this.get('e-kit'); }
    set e(value){ return this.set('e-kit',value); }
}


class KPISubjectEntity extends KPIEntity{
    constructor( title , grade , id ){
        super( 'subject' , title )
        this.title=title;
        this.grade=(typeof grade === 'object')?grade:ekit.grade(grade);
        if(typeof this.grade === 'undefined') this.grade=grades.match(title);
        this.id=id;
    }
}


class KPIJurisdictionEntity{
    constructor( jurisdiction ){
        this.subjects=[]
        this.type='jurisdiction';
        if(jurisdiction && jurisdiction.type){
            switch (jurisdiction.type){
                case 'state':
                    this.setState(jurisdiction);
                    break;
                default:break;
            }
        }
    }
    setState(state){
        if(state && state.standardSets) {
            _.set(this,state.standardSets);
            delete state.standardSets;
            Object.assign(this, state);
        }
        return this;
    }
    getStandard(subject){
        if(!_.has(this)) return [];
        return _.get(this).filter((ss)=>{
            if(ss.subject === subject.title){ return true; }
            else if(ss.subject.indexOf(subject.title)>=0){ return true; }
            return false;
        }).map((stand)=>{
            if(stand.educationLevels){
                stand.educationLevels=stand.educationLevels.map((l)=>{
                    if(typeof l !== 'number') {
                        if (l !== 'K' && l !== 'Pre K') {
                            return parseInt(l);
                        }
                    }else if(l !== NaN && l !== Infinity){
                        return l;
                    }
                    return -1;
                })
            }else{ stand.educationLevels=[]; }
            return stand;
        });
    }
    subjectStandard(subject){
        let stds=this.getStandard(subject);
        return stds.filter((it)=>{
            if(it.educationLevels.indexOf(subject.grade)>=0){ return true; }
            return false;
        });
    }
    setSubject(value){
        let name=value.subject;
        let grades=value.grades;
        for(var i in grades){this.subjects.push({title:name,grade:grades[i]});}
    }
    setSubjects(value){
        if(!Array.isArray(value)) return this;
        value.forEach((subject)=>{ this.setSubject(subject); });
        this.subjects.forEach((s)=>{ s.standardSets = this.subjectStandard(s); });
        return this.align();
    }
    align(){ return KPI.jurisdiction(this); }
}


class KPISubjectReferenceEntity{
    constructor( subject , grade ) {
        if (typeof subject !== 'string' || !subject.length) throw new TypeError('KPISubjectReferenceEntity subject must be valid string')
        this.subject = subject;
        if (typeof grade === 'string' && grade !== 'K') grade = parseInt(grade);
        else if (grade === 'K') {
            grade = 0;
        }
        if (typeof grade !== 'number' || grade === NaN || grade === Infinity) throw new TypeError('KPISubjectReferenceEntity grade must be an integer')
        this.grade = grade;
    }
}


const KPI= {
    get subjects(){
        if(!this._subjects){
            this._subjects=[];
            for (let subject of subjects){

                for (let grd of grades){
                    let G={
                        title:grd[1].grade,
                        value:grd[1].value,
                        name:grd[1].name
                    }
                    let g = new KPISubjectEntity( subject.title , G  );
                    g.titles=subject.titles;
                    var TS = search.ks(g.grade.title);
                    if(TS.length){
                        var AT = TS[0].filter((sub)=>{
                            let sname=sub.split('grade')[1].trim()
                            //console.log(sname)
                            if(g.titles.toLowerCase().indexOf(sname)>=0){ return true; }
                            return false;
                        });
                        g.ks=AT
                    }
                    if(typeof g.ks !== 'undefined'){
                        if(g.ks.length){
                            g.ks=g.ks.map((name)=>{
                                return core.get(name);
                            })
                        }
                    }
                    this._subjects.push(g);
                }
            }
        }
        return this._subjects;
    },
    subject:function(title,grade){
        let t = title.toLowerCase().trim();
        return KPI.subjects.filter((s)=>{
            if(s.titles){
                let ts = s.titles.toLowerCase();
                if(s.title === title || ts.indexOf(t) >= 0){
                    //console.log('matched title',t);
                    //console.log('matching grdes',grade,s.grade);
                    if(s.grade && grade === s.grade.value){
                        return true;
                    }
                }
            }
            return false;
        });
    },
    jurisdiction( j ){
        if(j.subjects){
            j.subjects.forEach((sub)=>{
                let ks = KPI.subject(sub.title,sub.grade);
                if(ks && ks.length){
                    sub.kindleSparks=ks;
                }
            });
        }
        return j;
    },
    get $search(){ return search; }
};


KPI.Entity = KPIEntity;
KPI.Subject = KPISubjectEntity;
KPI.Jurisdiction=KPIJurisdictionEntity;


module.exports = KPI;