let Product,mongoose,Joi,sanitizeHtml;_afc‍.x([["list",()=>list],["write",()=>write],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_afc‍.w("../../models/product",[["default",["Product"],function(v){Product=v}]]);_afc‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_afc‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_afc‍.w("sanitize-html",[["default",["sanitizeHtml"],function(v){sanitizeHtml=v}]]);



const { ObjectId } = mongoose.Types;

       const list = async (ctx) => {
  try {
    ctx.body = await Product.find();
  }catch(e) {
    ctx.throw(e);
  }
};

       const write = async (ctx) => {
  const newProduct = new Product(ctx.request.body);
  try{
    await newProduct.save();
    ctx.body = newProduct;
  }catch(e) {
    ctx.throw(e);
  }
};

       const read = async (ctx) => {

  const {productId} = ctx.params;

  try{
    const findProduct = await Product.findById(productId);
    ctx.body = findProduct;
  }catch(e) {
    ctx.throw(e);
  }
};

       const remove = async (ctx) => {

  const {productId} = ctx.params;

  try{
    const findProduct = await Product.findById(productId);
    ctx.body = findProduct;
  }catch(e) {
    ctx.throw(e);
  }
};


       const update = async (ctx) => {

  const {productId} = ctx.params;

  try{
    const findProduct = await Product.findById(productId);
    ctx.body = findProduct;
  }catch(e) {
    ctx.throw(e);
  }
};


