(function(){
    "use strict";
    const I=require('./installer');

    class KSData extends Map{
        constructor(){
            super()
            let docs=this.docs
            let allNames=docs.map((n)=>{return n.name;})
            let siblings={};
            class Sibling{
                constructor(group,value){
                    this.group=group;
                    this.value=value;
                }
            }
            function addSibling(key,group,value){
                if(!siblings[key]){siblings[key]=[];}
                siblings[key].push(new Sibling(group,value));
            }
            this.names = allNames.filter((name)=>{
                let nm=name.replace(' spanish ','').replace('tests','').trim();
                if(name.indexOf('tests')>=0){
                    addSibling(nm,'test',name);
                    return false;
                }else if(name.indexOf('spanish')>=0){
                    addSibling(nm,'spanish',name);
                    return true;
                }else if(nm.indexOf('grade')>=0){ return true; }
                return false;
            });

        }
        get is(){ return I.is; }
        get docs(){ return I.dir().map((file)=>{
            let key=file.replace('.json','').replace('.zip','');
            let names=key.split('_').filter((a)=>{
                if(typeof a === 'string'){
                    a = a.trim();
                    if(a.length){
                        if(a !== 'kp' || a !== 'grade'){
                            return true;
                        }
                    }
                    return false;
                }
            });
            return {
                name:names.join(' '),
                file:file,
                tags:names
            };
        }); }
        find(doc){
            return this.docs.filter((a)=>{
                if(a.file===doc) return true;
                if(a.name===doc) return true;
                return false;
            })[0] || false;
        }
        data(named){
            let doc = this.find(named);
            if(doc){
                let data = I.unzip(doc.file);
                data.terms=doc.tags;
                data.tags=[];
                console.log(data);

                data.document = { name:data.name };
                return  data;
            }
            return false;
        }
        get(name){
            if(super.has(name)){return super.get(name);}
            let data=this.data(name);
            if(data){ super.set(name,data); }
            if(super.has(name)){ return super.get(name); }
            return new Error('No data named '+name);
        }

    }
    module.exports=new KSData();
})();

