(function(){
    "use strict";
    const JSZip = require('node-zip');
    const fs = require('fs')
    const Installer={
        dir:function(){
            try{return fs.readdirSync(__dirname+'/assets');}catch(e){}
            return [];
        },
        file:function(name){
            try{ return fs.readFileSync(__dirname+'/assets/'+name);
            }catch(e){}
            return false;
        },
        unzip:function(name){
            let data = this.file(name);
            if(data){
                let filename=name.replace('.zip','')
                let zip = new JSZip(data,{base64:false,checkCRC32:true});
                try{
                    let fdata = zip.files[filename]._data;
                    //console.log(filename,fdata)
                    if(typeof fdata === 'string'){
                        return JSON.parse(fdata);
                    }else if(typeof fdata === 'object'){
                        return fdata;
                    }
                }catch(e){return e;}
            }
            return new Error('No data named '+name+' was found');
        },
        is:{
            regs:{
                alphaWord:/^[a-z]+$/i,
                alpha:/^[a-z\s]+$/i,
                alphanumWord:/^[a-z0-9]+$/i,
                alphanumScore:/^[a-z\d\-_\s]+$/i,
                alphanum:/^[a-z\d\s]+$/i,
                num:/^[0-9]+$/i
            },
            alpha:function(v){
                v=v+'';
                return this.regs.alpha.test(v);
            },
            alphanum:function(v){
                v=v+'';
                return this.regs.alpha.test(v);
            },
            num:function(v){
                v=v+'';
                return this.regs.alphanum.test(v);
            },
            int:function(v){
                if(typeof v === 'number'){
                    return (v !== NaN && v !== Infinity) ? v:false;
                }else if(this.num(v)){
                    return parseInt(v);
                }
                return false;
            }
        }
    };

    module.exports = Installer;
})();